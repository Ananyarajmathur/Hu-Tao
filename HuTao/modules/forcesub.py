from HuTao import app, BOT_ID
from HuTao import SUDO as CHAD
from pyrogram import filters, enums 
from HuTao.helpers.status import user_admin, bot_admin, bot_can_ban
from pyrogram.enums import ChatMemberStatus
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup , CallbackQuery ,ChatPermissions
from pyrogram.errors import BadRequest 
from HuTao.database.approve_db import approved_users
from HuTao.database.fsub_db import *

forsesub_watcher = 6

@app.on_message(filters.command("fsub") & filters.group)
@user_admin
@bot_admin
@bot_can_ban
async def _force_sub(_, message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    args = message.text.split()
    user = await _.get_chat_member(chat_id,user_id)
    if not user.status == ChatMemberStatus.OWNER :
        return await message.reply_text("…¢ Ä·¥è·¥ú·¥ò ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä  Ä·¥á«´·¥ú…™ Ä·¥á·¥Ö \n è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥õ·¥è  ô·¥á ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò ·¥Ñ Ä·¥á·¥Ä·¥õ·¥è Ä ·¥õ·¥è ·¥Ö·¥è ·¥õ ú·¥Ä·¥õ.")           
    if "OFF".lower() in args:
         await fsub_off(chat_id)
         return await message.reply_text("**‚ùå “ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™ ô·¥á …™s ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö s·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è**")
    elif len(args) < 2:
        return await message.reply_text("…¢…™·¥†·¥á ·¥ç·¥á ·¥Ä ·¥Ñ ú·¥Ä…¥…¥·¥á ü …™·¥Ö ·¥è Ä ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥õ·¥è ·¥á…¥·¥Ä ô ü·¥á “ì·¥è Ä·¥Ñ·¥á s·¥ú ô")
    ch = args[1]
    try:
        channel = await _.get_chat(ch)
    except:
        return await message.reply_text("…™…¥·¥†·¥Ä ü…™·¥Ö ·¥Ñ ú·¥Ä…¥…¥·¥á ü ·¥ús·¥á Ä…¥·¥Ä·¥ç·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö")
    try:
        await _.get_chat_member(channel.id,BOT_ID)
    except BadRequest :
        return await message.reply_text("…™ ·¥Ä·¥ç …¥·¥è·¥õ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú·¥Ä·¥õ ·¥Ñ ú·¥Ä…¥…¥·¥á ü. ·¥ò ü·¥á·¥Äs·¥á ·¥ç·¥Ä·¥ã·¥á s·¥ú Ä·¥á ·¥Ä·¥ç ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ ú·¥á Ä·¥á.")
    member = await _.get_chat_member(channel.id,BOT_ID)
    if member.status != ChatMemberStatus.ADMINISTRATOR:
        return await message.reply_text(
                f"‚ùó**…¥·¥è·¥õ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü**\nI ·¥Ä·¥ç …¥·¥è·¥õ ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥õ ú·¥á [·¥Ñ ú·¥Ä…¥…¥·¥á ü](https://t.me/{ch}). ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥Äs ·¥Ä ·¥Ä·¥Ö·¥ç…™…¥ …™…¥ ·¥è Ä·¥Ö·¥á Ä ·¥õ·¥è ·¥á…¥·¥Ä ô ü·¥á “ì·¥è Ä·¥Ñ·¥ás·¥ú ôs·¥Ñ Ä…™ ô·¥á.")

    await fsub_on(chat_id,channel.id)
    await message.reply_text(f"‚úÖ **“ì·¥è Ä·¥Ñ·¥á s·¥ú ôs·¥Ñ Ä…™ ô·¥á …™s ·¥á…¥·¥Ä ô ü·¥á·¥Ö** to @{channel.username}.")

@app.on_message(filters.command("fsub_stats") & filters.group)
@user_admin
async def _force_stat(_, message):
    chat_id = message.chat.id
    status = await fsub_stat(chat_id)
    if status is True:
        channel = await _.get_chat(await get_channel(chat_id)) 
        return await message.reply_text(f"“ì·¥è Ä·¥Ñ·¥ás·¥ú ô …™s ·¥á…¥·¥Ä ô ü·¥á·¥Ö ·¥Ä·¥ç ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥ç·¥ú·¥õ…™…¥…¢ ·¥ús·¥á Äs ·¥° ú·¥è  ú·¥Ä·¥†·¥á…¥'·¥õ …™·¥è…™…¥·¥á·¥Ö [·¥õ ú…™s ·¥Ñ ú·¥Ä…¥…¥·¥á ü](t.me/{channel.username})")
    return await message.reply_text("“ì·¥è Ä·¥Ñ·¥á s·¥ú ô …™s ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ ü è ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö …™…¥ ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ")

@app.on_message(group=forsesub_watcher)
async def _mute(_, message):
    chat_id = message.chat.id
    if not await fsub_stat(chat_id):
        return
    if not message.from_user:
        return
    SUPREME = await approved_users(chat_id) + CHAD    
    async for m in _.get_chat_members(chat_id, filter=enums.ChatMembersFilter.ADMINISTRATORS):
        SUPREME.append(m.user.id)
    if message.from_user.id in SUPREME:
        return 
    ch = await get_channel(chat_id)
    channel = await _.get_chat(ch)
    buttons = InlineKeyboardMarkup([[InlineKeyboardButton("·¥ä·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü",url=f"t.me/{channel.username}"), InlineKeyboardButton("ü§ê ·¥ú…¥·¥ç·¥ú·¥õ·¥á ·¥ç·¥á", callback_data=f"fsubuser_{message.from_user.id}")]])
    msg = f"{message.from_user.mention},  è·¥è·¥ú  ú·¥Ä·¥†·¥á …¥·¥è·¥õ s·¥ú ôs·¥Ñ Ä…™ ô·¥á·¥Ö ·¥õ·¥è ·¥è·¥ú Ä [·¥Ñ ú·¥Ä…¥…¥·¥á ü](t.me/{channel.username})  è·¥á·¥õ‚ùó·¥ò ü·¥á·¥Äs·¥á ·¥ä·¥è…™…¥ ·¥Ä…¥·¥Ö ·¥ò Ä·¥áss ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü·¥è·¥° ·¥õ·¥è ·¥ú…¥·¥ç·¥ú·¥õ·¥á  è·¥è·¥ú Äs·¥á ü“ì"
    await message.reply_text(msg,reply_markup=buttons)
    try:
        await _.restrict_chat_member(chat_id, message.from_user.id, ChatPermissions(can_send_messages=False))
    except Exception as e:
        await message.reply_text(e)
  
@app.on_callback_query(filters.regex(pattern=r"fsubuser_(.*)"))
async def ok(_, query : CallbackQuery):
    muted_user = int(query.data.split("_")[1])
    chat_id = query.message.chat.id
    ch = await get_channel(chat_id)
    members = []
    async for member in _.get_chat_members(ch):
        members.append(member.user.id)
    user_id = query.from_user.id
    if user_id != muted_user:
        await _.answer_callback_query(query.id,text="‚ùå ·¥õ ú…™s …™s …¥·¥è·¥õ “ì·¥è Ä  è·¥è·¥ú.",show_alert=True)
        return   
              
    if not muted_user in members:
        return await _.answer_callback_query(query.id,text=" è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥õ·¥è ·¥ä·¥è…™…¥ ·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á ü “ì…™ Äs·¥õ, ·¥õ·¥è …¢·¥á·¥õ ·¥ú…¥·¥ç·¥ú·¥õ·¥á·¥Ö!",show_alert=True)
    
    try :
        await _.unban_chat_member(chat_id,muted_user)
    except Exception as er:
        print(er)
    await query.message.delete()
